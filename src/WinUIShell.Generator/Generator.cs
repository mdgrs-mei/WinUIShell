using System.Text;
using System.Xml.Serialization;
using Microsoft.CodeAnalysis;

namespace WinUIShell.Generator;

[Generator(LanguageNames.CSharp)]
public class Generator : IIncrementalGenerator
{
    public class Api
    {
        public List<EnumDef> Enums { get; set; } = [];
    }

    public class TypeDef
    {
        public string Name { get; set; } = "";
        public string FullName { get; set; } = "";
        public string Namespace { get; set; } = "";
    }

    public class EnumDef : TypeDef
    {
        public string UnderlyingType { get; set; } = "";
        public List<EnumEntryDef> Entries { get; set; } = [];
    }

    public class EnumEntryDef
    {
        public string Name { get; set; } = "";
        public object? Value { get; set; }
    }

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput((postInitContext) =>
        {

        });

        var provider = context.AdditionalTextsProvider.Where((text) =>
        {
            return text.Path.EndsWith("Api.xml");
        }).Combine(context.AnalyzerConfigOptionsProvider);

        context.RegisterSourceOutput(provider, (sourceProductionContext, source) =>
        {
            var text = source.Left.GetText();
            if (text is null)
                return;

            var stringReader = new StringReader(text.ToString());
            var serializer = new XmlSerializer(typeof(Api));
            var api = (Api)serializer.Deserialize(stringReader);
            if (api is null)
                return;

            var configOptionsProvider = source.Right;
            if (configOptionsProvider.GlobalOptions.TryGetValue("build_property.WinUIShellGenerator_GenerateTypeMapping", out var generateTypeMapping))
            {
                GenerateEnumTypeMapping(sourceProductionContext, api);
            }
            else
            {
                GenerateEnums(sourceProductionContext, api);
                GenerateObjects(sourceProductionContext, api);
            }
        });
    }

    private static void GenerateEnumTypeMapping(SourceProductionContext sourceProductionContext, Api api)
    {
        StringBuilder sourceCode = new();

        _ = sourceCode.Append($$"""
            // <auto-generated/>
            #nullable enable

            namespace WinUIShell.Common;

            internal sealed class EnumTypeMapping : Singleton<EnumTypeMapping>
            {
                private readonly Dictionary<string, string> _map = [];

                public EnumTypeMapping()
                {
                    foreach (var map in _list)
                    {
                        _map.Add(map.Item1, map.Item2);
                        _map.Add(map.Item2, map.Item1);
                    }
                }

                public bool TryGetValue(string sourceEnumType, out string? targetEnumType)
                {
                    return _map.TryGetValue(sourceEnumType, out targetEnumType);
                }

                private readonly List<(string, string)> _list = [
            
            """);

        foreach (var enumDef in api.Enums)
        {
            _ = sourceCode.Append($"""
                        ("WinUIShell.{enumDef.Namespace}.{enumDef.Name}, WinUIShell", "{enumDef.FullName}"),

                """);
        }
        _ = sourceCode.Append("    ];\r\n}\r\n");

        sourceProductionContext.AddSource($"EnumTypeMapping.g.cs", sourceCode.ToString());
    }

    private static void GenerateEnums(SourceProductionContext sourceProductionContext, Api api)
    {
        foreach (var enumDef in api.Enums)
        {
            StringBuilder sourceCode = new();

            _ = sourceCode.Append($$"""
                // <auto-generated/>

                namespace WinUIShell.{{enumDef.Namespace}};

                public enum {{enumDef.Name}} : {{enumDef.UnderlyingType}}
                {

                """);

            foreach (var item in enumDef.Entries)
            {
                _ = sourceCode.Append($"    {item.Name} = {item.Value},\r\n");
            }
            _ = sourceCode.Append("}\r\n");

            sourceProductionContext.AddSource($"WinUIShell.{enumDef.Namespace}.{enumDef.Name}.g.cs", sourceCode.ToString());
        }
    }

    private static void GenerateObjects(SourceProductionContext sourceProductionContext, Api api)
    {

    }
}
