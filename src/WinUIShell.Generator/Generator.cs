using System.Xml.Serialization;
using Microsoft.CodeAnalysis;

namespace WinUIShell.Generator;

[Generator(LanguageNames.CSharp)]
public class Generator : IIncrementalGenerator
{
    public class Api
    {
        public List<EnumDef> Enums { get; set; } = [];
    }

    public class TypeDef
    {
        public string Name { get; set; } = "";
        public string FullName { get; set; } = "";
        public string Namespace { get; set; } = "";
    }

    public class EnumDef : TypeDef
    {
        public string UnderlyingType { get; set; } = "";
        public List<EnumEntryDef> Items { get; set; } = [];
    }

    public class EnumEntryDef
    {
        public string Name { get; set; } = "";
        public object? Value { get; set; }
    }

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput((postInitContext) =>
        {

        });

        var additionalTextProvider = context.AdditionalTextsProvider.Where((text) =>
        {
            return text.Path.EndsWith("Api.xml");
        });

        context.RegisterSourceOutput(additionalTextProvider, (sourceProductionContext, additionalText) =>
        {
            var text = additionalText.GetText();
            if (text is null)
                return;

            var stringReader = new StringReader(text.ToString());
            var serializer = new XmlSerializer(typeof(Api));
            var api = serializer.Deserialize(stringReader);

            var sourceCode = $$"""
// <auto-generated/>

namespace WinUIShell;

public enum BackgroundSizing
{
    InnerBorderEdge,
    OuterBorderEdge
}

""";
            sourceProductionContext.AddSource("BackgroundSizing.g.cs", sourceCode);

        });
    }
}
